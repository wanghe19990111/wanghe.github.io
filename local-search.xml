<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Games202-Lecture6 Environment Mapping</title>
    <link href="/2022/07/26/Games202-Lecture6/"/>
    <url>/2022/07/26/Games202-Lecture6/</url>
    
    <content type="html"><![CDATA[<h1 id="Environment-lighting-shadow"><a href="#Environment-lighting-shadow" class="headerlink" title="Environment lighting shadow"></a>Environment lighting shadow</h1><img src="/2022/07/26/Games202-Lecture6/image-20220726103357038.png" alt="image-20220726103357038" style="zoom:80%;"><p>环境光照如何计算阴影？有两个问题</p><p>1.many light问题:我们把环境光理解为很多个小的光源,这种情况下去生成阴影的话,需要在每个小光源下生成shadow map,因此会生成线性于光源数量的shadow map,这是十分高昂的代价.</p><p>2.sampling问题:在任何一个Shading point上已知来自正半球方向的光照去接rendering equation,最简单的方法是采样空间中各方向上的不同光照,可以做重要性采样,虽然做了重要性采样但仍需要大量的样本,因为最困难的是visibility term.由于Shading point不同方向上的遮挡是不相同的,我们可以对环境光照进行重要性采样,但一个SP周围的visibility项是未知的,因此我们只能盲目的去采样(我个人对盲目采样的理解是,为了确保准确性需要对sp各个方向的遮挡进行采样,因此仍然会生成大量的样本).我们也无法提取出visibility项,因为如果是glossy brdf,他是一个高频的,且Lighting项的积分域是整个半球,因此并不满足smooth或small support,因此无法提取出visibility项.</p><h1 id="基础知识回顾"><a href="#基础知识回顾" class="headerlink" title="基础知识回顾"></a>基础知识回顾</h1><img src="/2022/07/26/Games202-Lecture6/image-20220726104355947.png" alt="image-20220726104355947" style="zoom:80%;"><p>傅里叶展开：任何一个函数都可以用常数与sin、cos的和进行拟合，基函数越多，拟合效果越好。</p><img src="/2022/07/26/Games202-Lecture6/image-20220726104513501.png" alt="image-20220726104513501" style="zoom:80%;"><p>变化越剧烈的地方，频率越高。任何一张图(也就是二维函数)的频率,也就是频域上对应的内容可以用一张频谱表示出来。</p><img src="/2022/07/26/Games202-Lecture6/image-20220726104638130.png" alt="image-20220726104638130" style="zoom:80%;"><p>频谱最中心处是低频内容,我们可以做一个filtering(滤波),从而去除一系列频率上的内容,我们对这张图用一个低通滤波器,从而把高频的内容去除掉.</p><img src="/2022/07/26/Games202-Lecture6/image-20220726104723479.png" alt="image-20220726104723479" style="zoom:80%;"><p>所谓卷积，实际上就是一种模糊操作，取周围像素进行平均之后写回原像素。如图为均值滤波。</p><img src="/2022/07/26/Games202-Lecture6/image-20220726105344701.png" alt="image-20220726105344701" style="zoom:80%;"><p>对于任意的product integral(两个函数先乘积在积分),我们将其认为是做了一个卷积操作,理解为spatial域上的两个信号f(x)和g(x)进行一个卷积,等于在频域上让两个信号相乘,如果两个信号有一个信号是低频的,那么频域上相乘后得到的结果也是低频的,最终相乘在积分的结果也是低频的,可以总结为：<strong>积分之后的频率取决于积分前最低的频率，即the frequency of the integral is the lowest of any individual’s</strong>。</p><p>低频意味着变换更加地smooth或者有着slow的变化。</p><img src="/2022/07/26/Games202-Lecture6/image-20220726105525594.png" alt="image-20220726105525594" style="zoom:80%;"><p>基函数：本质上就是一系列函数，他们的线性组合可以描述某个函数。</p><p>回归正题,我们要讨论的是如何在环境光照下生成阴影,先从最简单的开始,如果给了你环境光和一个diffuse的物体,在不考虑Shadow的情况下如何去计算shading值?</p><p>为了计算shading值,我们引入数学工具—–&gt;Spherical Harmonics(球谐函数)</p><p>在游戏渲染中,SH有很多应用.比如SH可以用来表示低频部分的环境光照,也可以用来提供light probe的烘培光照等等..</p><h1 id="Spherical-Harmonics-球谐函数"><a href="#Spherical-Harmonics-球谐函数" class="headerlink" title="Spherical Harmonics(球谐函数)"></a><em>Spherical Harmonics(球谐函数)</em></h1><img src="/2022/07/26/Games202-Lecture6/image-20220726114634292.png" alt="image-20220726114634292" style="zoom:80%;"><p>SH是一系列基函数,系列中的每个函数都是2维函数,并且每个二维函数都是定义在球面上的。</p><p>1.它是一系列的基函数，可以以傅立叶变换为参考,与里面不同频率的cos和sin函数类似,只是全都是二维函数</p><p>2.因为它是定义在球面上的，球面上会有不同的值,由于在球面上两个角度<img src="https://www.zhihu.com/equation?tex=%5Ctheta++++" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=++%5Cvarphi" alt="[公式]">就可以确定一个方向了,因此可以理解为是对方向的函数,通过两个角度变量从而知道这一方向对应在球面上的值.</p><p>上图是对SH的可视化，与一维的傅里叶一样,SH也存在不同频率的函数，但不同频率的函数个数也不同,频率越高所含有的基函数越多。</p><p>图中的颜色表示的是值的大小,l&#x3D;0中,越偏白的蓝色地方值越大,越黑的地方值越小.而黄色中则表示偏白的地方表示其绝对值大,偏黑的地方表示绝对值小.也就是蓝色表示正,黄色表示负.</p><p>频率表示的就是值的变化,因此可以很清晰的从形状看出.</p><img src="/2022/07/26/Games202-Lecture6/image-20220726114705858.png" alt="image-20220726114705858" style="zoom:80%;"><p>其中，l表示的是阶数，通常第l阶有<img src="https://www.zhihu.com/equation?tex=2l+1" alt="[公式]">个基函数，前n阶有<img src="https://www.zhihu.com/equation?tex=n%5E2" alt="[公式]">个基函数，m表示的是在某一个频率下基函数的序号，分别从从<img src="https://www.zhihu.com/equation?tex=-l" alt="[公式]">一直到<img src="https://www.zhihu.com/equation?tex=l" alt="[公式]">。每个基函数都有一个比较复杂的数学表示，对应一个legendre多项式，我们不用去了解legendre多项式,我们只需要知道基函数长这样,可以被某些数学公式来定义不同方向的值是多少就可以了.</p><p>下面定义一些操作：</p><p><strong>投影</strong>：由于一个函数 <img src="https://www.zhihu.com/equation?tex=f(w)" alt="[公式]"> 可以由一系列基函数和系数的线性组合表示，那么怎么确定基函数前面的系数，这就需要通过投影操作：</p><img src="/2022/07/26/Games202-Lecture6/v2-67b41abfd72432eb4f7a422f4be9a013_720w.png" alt="img" style="zoom:80%;"><p>我们知道函数F(X),通过对应的基函数B(i)进行投影操作,从而求出各基函数对应的系数Ci,与以下操作是同一个道理,在空间中想描述一个向量，可以xyz三个坐标来表达，把xyz轴当做三个基函数，把向量投影到xyz轴上，得到三个系数就是三个坐标。</p><p><strong>重建</strong>：知道基函数对应的系数，就能用系数和基函数恢复原来的函数。</p><p>由于基函数的阶可以是无限个的，越高的阶可恢复的细节就越好,但一方面是因为更多的系数会带来更大的存储压力、计算压力，而一般描述变化比较平滑的环境漫反射部分，用3阶SH就足够了；另一方面则是因为SH的物理含义不是特别好理解，高阶SH容易出现各种花式Artifact，美术同学一般都会认为这种表现属于bug。</p><img src="/2022/07/26/Games202-Lecture6/v2-29ee61ce4bbc3bb72154034469da0939_720w.png" alt="img" style="zoom:80%;"><p>f(w)可以是任何一个函数,我们说过基函数可以重建任何一个球面函数,那么我们这里的f(w)就是环境光照,由于环境光是来自于四面八方且都有值,所以环境光照就是一个球面函数,,我们可以把它投影到任何一个SH basis上,可以投影很多阶,但是只需要取前三阶的SH去恢复环境光就可以恢复出最低频的细节了,这个在下文RAVI教授的结论有提到.</p><img src="/2022/07/26/Games202-Lecture6/image-20220726142300864.png" alt="image-20220726142300864" style="zoom:80%;"><p>Ravi教授等人在01年左右做过一些实验发现，diffuse BRDF类似于一个低通滤波器，使用一些低频信息就可以恢复出原始内容。回忆一下，在本文之前的内容中曾说过：“<strong>积分之后的频率取决于积分前最低的频率</strong>”，当diffuse BRDF使用低频信息即可恢复内容时，也就意味着无论光照项是多么复杂，其本应该用多高频的基函数去表示，但我们希望得到的是其与BRDF之积的积分，所以可以使用比较低频的基函数去描述灯光。下面的实验结果意味着，遇到diffuse的物体时使用前3阶的球谐基函数就可以基本重建出正确率99%的结果，因为diffuse基本都是低频。</p><h1 id="Precomputed-Radiance-Transfer-PRT"><a href="#Precomputed-Radiance-Transfer-PRT" class="headerlink" title="Precomputed Radiance Transfer(PRT)"></a>Precomputed Radiance Transfer(PRT)</h1><img src="/2022/07/26/Games202-Lecture6/image-20220726150700435.png" alt="image-20220726150700435" style="zoom:80%;"><p>BRDF:四维函数，入射出射分别有两个角</p><p>显而易见，我们可以把渲染方程拆解为三项的乘积：lighting、visibility与BRDF。三者都是球面函数，可以用cube来表示。那么最简单的方法就是每个像素挨个去乘，当然这样做的话消耗太大了。假设cube分辨率为6*64*64，那么每个SP我们都要计算6*64*64次。</p><p>因此我们利用基函数的基本原理把一些东西先预计算出来,从而节省开销.</p><img src="/2022/07/26/Games202-Lecture6/v2-ac89de64010d5e44c6965bde98867b83_720w.jpg" alt="img" style="zoom:80%;"><p>PRT的基本思想:</p><p>我们把rendering equation分为两部分,lighting 和 light transport.</p><p>假设在渲染时场景中只有lighting项会发生变化(旋转,更换光照等),由于lighting是一个球面函数,因此可以用基函数来表示,在预计算阶段计算出lighting.</p><p>而light transport(visibility和brdf)是不变的,因此相当于对任一shading point来说,light transport项固定的,可以认为是shading point自己的性质,light transport总体来说还是一个球面函数,因此也可以写成基函数形式,是可以预计算出的.</p><p>我们分为两种情况,diffuse和glossy:</p><p>Diffuse:</p><img src="/2022/07/26/Games202-Lecture6/v2-a73f305b4ce3a40765ba81291217a0c4_720w.jpg" alt="img" style="zoom:80%;"><p>由于在diffuse情况下,brdf几乎是一个常数,因此我们把brdf提到外面.</p><img src="/2022/07/26/Games202-Lecture6/v2-063db9e7d2ec8701b04a7cec91f4bfbb_720w.jpg" alt="img" style="zoom:80%;"><p>由于lighting项可以写成基函数的形式,因此我们求和式把其代入积分中,对于任何一个积分来说,在Bi的限制下,li此对积分来说是常数,可以提出来.</p><img src="/2022/07/26/Games202-Lecture6/v2-3140646120f0f4b79b851e94394a4336_720w.jpg" alt="img" style="zoom:80%;"><p>对于积分中的部分来说,Bi是基函数,v和cos项在一起不就是light transport吗,那不就是light transport乘与一个基函数，这就成了lighting transport投影到一个基函数的系数，接下来代入不就能进行预计算了吗，这样就只要算一个点乘就好了。</p><p>之所以说是点乘,结果是个求和,我们要计算 <img src="https://www.zhihu.com/equation?tex=l_%7B1%7DT_%7B1%7D" alt="[公式]"> + <img src="https://www.zhihu.com/equation?tex=l_%7B2%7DT_%7B2%7D" alt="[公式]"> +……,不正好相当于两个向量点乘吗.</p><p>所以对于任何一个shading point我们去算他的shading 和 shadow,只需要计算一个点乘就可以了,十分方便,</p><h2 id="但是-没有东西是十全十美的-那么-古尔丹-这次的代价又是什么呢"><a href="#但是-没有东西是十全十美的-那么-古尔丹-这次的代价又是什么呢" class="headerlink" title="但是,没有东西是十全十美的,那么,古尔丹,这次的代价又是什么呢?"></a><em>但是,没有东西是十全十美的,那么,古尔丹,这次的代价又是什么呢?</em></h2><p><strong>1.light transport做了预计算,因此visibility当了常量,因此场景不能动,因此只能对静止物体进行计算.</strong></p><p><strong>2.对于预计算的光源我们把它投影到sh上,如果光源发生了旋转,那不就相当于换了个光源吗?</strong></p><p><strong>但是第二个问题由于sh函数的旋转不变性可以完美的解决.</strong></p><p><strong>旋转光照 &#x3D; 旋转SH的基函数</strong></p><p><strong>但 任何一个SH基函数旋转后都可以被同阶的SH基函数线性组合表示出来</strong></p><p><strong>因此,我们根据这个性质,还是可以立刻得出旋转后的sh基函数新的线性组合.</strong></p><p><img src="https://pic1.zhimg.com/80/v2-1af5b28f676ada1377b7be890d0b3450_720w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-28c800ce45f3e692eb26d070f8ae458b_720w.jpg" alt="img"></p><p>用的阶数越多越接近与原始函数,第四张图是前26阶函数去重建原始函数,可以看到效果还不错.但我们在使用时用不到那么多阶.</p><p><img src="https://pic4.zhimg.com/80/v2-318c5c351b31b595af6454caabfdd04b_720w.jpg" alt="img"></p><p>我们将lighting这个球面函数,通过SH的基函数用一堆系数来表示,这些系数排成一行也就是组成了向量,因此光照变成了一个向量.</p><p>如果要重建原函数则只需要把这些系数乘以对应的基函数再加在一起即可.</p><p><img src="https://pic3.zhimg.com/80/v2-130a4f57f42036c2d1ea9d489d60684a_720w.jpg" alt="img"></p><p>我们可以把Bi理解为lighting,也就是说每个basis所描述的环境光去照亮这个物体从而得到照亮之后的结果,我个人理解预计算就是把每个basis照亮得到的结果生成.</p><p><img src="https://pic4.zhimg.com/80/v2-1499b4c16aee149846108b79d6cd63b7_720w.jpg" alt="img"></p><p>最后我们在计算shading 和 shadow时只需要进行向量li和ti的点乘即可得到结果.</p><p>到此我们知道了如何再已知环境光的情况下,通过使用PRT来计算出diffuse物体的shading 和 Shadow了.</p><p>参考文章：</p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Games202</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Games202-Lecture5 Environment Mapping</title>
    <link href="/2022/07/25/Games202-Lecture5/"/>
    <url>/2022/07/25/Games202-Lecture5/</url>
    
    <content type="html"><![CDATA[<h1 id="SDF"><a href="#SDF" class="headerlink" title="SDF"></a>SDF</h1><img src="/2022/07/25/Games202-Lecture5/image-20220725113942078.png" alt="image-20220725113942078" style="zoom: 80%;"><p>SDF: signed distance field   有向距离场  存储该位置到附近表面的最短距离 正负号代表物体内外</p><p>上图为SDF处理软阴影的效果（下面有具体说明）</p><img src="/2022/07/25/Games202-Lecture5/image-20220725114142706.png" alt="image-20220725114142706" style="zoom:80%;"><p>左图为SDF生成距离场的可视化效果图，在A内部距离为负的涂全黑，在A外部距离越远，颜色越浅。右图为另一种等高线距离场的画法。</p><img src="/2022/07/25/Games202-Lecture5/image-20220725114405023.png" alt="image-20220725114405023" style="zoom:80%;"><p>图A中有一个黑色物体向右匀速移动，图B为一段时间后物体的移动位置。现在需要求在中间时刻物体的位置：</p><p>​1）在101中讲过普通的线性插值方法，对同一个像素的两个不同时间的颜色进行差值，得到的效果为lerp(A,B)。可以看出插值结果为灰色，不符合要求。</p><p>​2）通过模拟距离场进行差值。黑色内距离为负，白色内距离为正(物体外)。离交界面越远，距离的绝对值越大。此时再次对像素进行距离差值，得到右下图的效果，符合要求。</p><img src="/2022/07/25/Games202-Lecture5/image-20220725115242176.png" alt="image-20220725115242176" style="zoom:80%;"><p>如图为距离场的另一种应用：物体融合。更详细的理解可以查看”最优传输”技术，在这里不再赘述。</p><h2 id="SDF-Ray-Marching"><a href="#SDF-Ray-Marching" class="headerlink" title="SDF Ray Marching"></a>SDF Ray Marching</h2><img src="/2022/07/25/Games202-Lecture5/image-20220725125111631.png" alt="image-20220725125111631" style="zoom:80%;"><p><strong>光线步进(Ray Marching)<strong>有时也被称为</strong>球体追踪(Sphere Tracing)</strong>, 因为每次都是检测球形内的物体。使用三维空间内的SDF可以实现最大效率的不定长光线步进。每个SDF存储以该点为球心，距离为半径的球体，球体与最近表面相切且内部一定是空的。因此光线步进的这个半径距离也称为安全距离。</p><p>Sphere Tracing 缺点：光线延物体表面步进时步长会特别短，计算量很大；三维SDF需预计算，计算量大，存储信息巨量，且当场景内物体发生形变时更新困难。SDF生成表面不好贴纹理</p><p>优化：场景中多个物体可以分别单独计算SDF，整合时每个点取每个物体最小的SDF。</p><p>​采用类似八叉树的方式进行存储</p><h2 id="SDF-生成软阴影"><a href="#SDF-生成软阴影" class="headerlink" title="SDF 生成软阴影"></a>SDF 生成软阴影</h2><img src="/2022/07/25/Games202-Lecture5/image-20220725130237059.png" alt="image-20220725130237059" style="zoom:80%;"><p>主要思想：通过SDF得到一个大概的 <strong>遮挡百分比</strong>，用1减去它就得到visibility项</p><p>引入<strong>安全角度</strong>：从地面上的某一shading point向一方向发射一条光线，光线在空中某一点(最小SDF点？)的SDF会构成一个球体。该球体的切线与原始光线的夹角称为安全角度。</p><p>渲染阴影时</p><ul><li><strong><code>safe angle越小，阴影越深。</code></strong></li><li><strong><code>safe angle越大，阴影越浅。</code></strong></li></ul><img src="/2022/07/25/Games202-Lecture5/image-20220725131956064.png" alt="image-20220725131956064" style="zoom:80%;"><p>多个遮挡物或多个采样点时，采用之前提到的SDF步进方式，取最小的安全角度为该shading point的软阴影程度。</p><img src="/2022/07/25/Games202-Lecture5/image-20220725132803209.png" alt="image-20220725132803209" style="zoom:80%;"><p>通常来讲，采用反三角函数的方式可以得到安全角度的值，但是计算量太大、由于可以采用近似方法计算软阴影，即得到的visibility可以不必那么精确。因此直接采用比值的方式求得，大小不超过1。引入系数k来控制阴影的软硬程度。k越小，很大的安全角度也会被纳入阴影之中(只是比较软)；k越大，很小的安全角度也可能算出来的值超过1而被舍弃，不计算阴影。因此k值越大，阴影范围越小，阴影越硬。</p><h1 id="Environment-Lighting-环境光照"><a href="#Environment-Lighting-环境光照" class="headerlink" title="Environment Lighting 环境光照"></a>Environment Lighting 环境光照</h1><img src="/2022/07/25/Games202-Lecture5/image-20220725135605293.png" alt="image-20220725135605293" style="zoom:80%;"><p>环境光照：使用一张图来存储在场景中向任意方向看去，所获得的光照。假设无限远。</p><p>扩展：主流两种存储方式：spherical map与cube map</p><p>spherical map：采用球体存储，相机无限远，盲区逐渐收缩成一个点，因此存储的内容为整个环境光照排除一个点。优点：只需要一张贴图；缺点：非线性分布映射，还原困难，中心区域精度最高，四周到背面精度低。</p><p>cube map：立方体盒，六个不同方向的贴图合并成一个立方体。使用时立方体中心与光线原点重合，当方向向量向外延伸时，就会和立方体表面上的相应纹理发生相交，我们可以根据该交点结合立方体的方向向量进行采样。</p><img src="/2022/07/25/Games202-Lecture5/image-20220725142021500.png" alt="image-20220725142021500" style="zoom:80%;"><p>环境光照不需要考虑visibility，从IBL图中可以直接得到shading point 的Li，因此我们的任务就是解渲染方程！</p><img src="/2022/07/25/Games202-Lecture5/image-20220725142212468.png" alt="image-20220725142212468" style="zoom:80%;"><p>经典解法：蒙特卡洛积分：对于任何积分可以用大量样本进行近似，计算量巨大。因此不太可能用于实时渲染。如何避免sampling(采样)？</p><img src="/2022/07/25/Games202-Lecture5/image-20220725144102312.png" alt="image-20220725144102312" style="zoom:80%;"><p>满足化简条件，可以进行积分乘积化简，结果如下：</p><img src="/2022/07/25/Games202-Lecture5/image-20220725144145690.png" alt="image-20220725144145690" style="zoom:80%;"><p>将Li提出来进行积分乘积化简，不同于上节计算shadow时提的visibility项。注意都要<strong>归一化</strong>！</p><img src="/2022/07/25/Games202-Lecture5/image-20220725144414375.png" alt="image-20220725144414375" style="zoom:80%;"><p>方程实质上是取照射到某一点的一小部分光线，在球面一定面积上进行BRDF，再将结果写回该点。可以理解为BRDF用不同滤波的核生成的Mipmap，结果就是图像越来越模糊。prefilter图像滤波？</p><img src="/2022/07/25/Games202-Lecture5/image-20220725145139591.png" alt="image-20220725145139591" style="zoom:80%;"><p>这样做的好处：以前当我们需要计算一个point的BRDF(及某一个lobe波瓣）时可能会需要很多分布点进行采样，然后加权平均。现在可以直接取镜面反射的方向上的一个值，mipmap大小根据lobe大小而定。</p><img src="/2022/07/25/Games202-Lecture5/image-20220725150006356.png" alt="image-20220725150006356" style="zoom:80%;"><p>基于以上，我们解决了化简后的BRDF方程乘积的前一项：即环境光照充当入射光，在某一点的入射光如何计算的问题。我们先refilter生成了不同模糊度的环境光照贴图，根据波瓣大小直接使用对应的贴图。那么如何解决后一项BRDF的积分？</p><img src="/2022/07/25/Games202-Lecture5/image-20220725152645692.png" alt="image-20220725152645692" style="zoom:80%;"><p>将F菲涅尔项带入，乘积拆开后可以化简为两个参数的函数：roughness与角Θ</p><p>后面真听不懂了。。。</p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Games202</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Games202-Lecture4 Real-Time-Shadow 2</title>
    <link href="/2021/12/22/Games202-Lecture4/"/>
    <url>/2021/12/22/Games202-Lecture4/</url>
    
    <content type="html"><![CDATA[<h1 id="PCF的数学原理"><a href="#PCF的数学原理" class="headerlink" title="PCF的数学原理"></a>PCF的数学原理</h1><img src="/2021/12/22/Games202-Lecture4/image-20211221121224624.png" alt="image-20211221121224624" style="zoom:80%;"><p><strong>x为shading point，投影到shadow map上为点p，q为包含p的范围N内的一点</strong></p><p>对于PCF的filter&#x2F;convolution卷积：</p><p>​w函数为根据距离等因素设置的加权，对于范围N内的每一个点q，函数值都要加权平均再相加，最后得到p点的值。</p><p>对于PCSS的卷积：</p><p>​函数的输出为点x的visibility。X函数为符号函数，变量大于零，函数值为1，否则为零。函数内部为点q与点x的深度值之差。若点q挡住了x，则X函数值为0。挡不到的话，X函数值为1。最后对N区域内无遮挡的点进行加权平均，最后得到visibility。</p><img src="/2021/12/22/Games202-Lecture4/image-20211221122948247.png" alt="image-20211221122948247" style="zoom:80%;"><p>对于PCF的软阴影PCSS，不要理解为对shadow map本身进行加权平均再比较，这样得到的结果仍旧是非零即一，软阴影要做的就是避开非零即一的情况。</p><p>且PCF不是对于图像空间内的x点的visibility进行加权平均。（PPT写错了，应该是包含x的范围N内的任意点y）</p><h1 id="对PCF的各种优化"><a href="#对PCF的各种优化" class="headerlink" title="对PCF的各种优化"></a>对PCF的各种优化</h1><img src="/2021/12/22/Games202-Lecture4/image-20211221124632089.png" alt="image-20211221124632089" style="zoom:80%;"><p>由于PCSS在第一步和第三步都要对一整片区域进行filter，因此效率很低。工业界目前采用取部分采样点的方法，但会产生噪声。</p><img src="/2021/12/22/Games202-Lecture4/image-20211221131957766.png" alt="image-20211221131957766" style="zoom:80%;"><p>可以采用正态分布的方法近似求得filter结果：均值决定尖在哪，方差决定了胖瘦。</p><img src="/2021/12/22/Games202-Lecture4/image-20211221132311009.png" alt="image-20211221132311009" style="zoom:80%;"><p>应用正态分布，PCF问题可以简化为在Shadow Map上指定任意一块区域，求深度平均值和方差。</p><p>求平均值可以采用mipmap或者SAT方法（见后文）。求方差可以直接用均值与方差的公式求出。为了求平方的均值，另起一张图记录每个深度的平方。在生成shadow map的同时生成square-depth map。</p><img src="/2021/12/22/Games202-Lecture4/image-20211221132836230.png" alt="image-20211221132836230" style="zoom:80%;"><p>对于想要求得的shading point x，可以通过均值和方差画出正态分布图，统计CDF(x)，即计算点x之前的面积。工业界直接打表，计算error function（误差函数）。</p><img src="/2021/12/22/Games202-Lecture4/image-20211221220711683.png" alt="image-20211221220711683" style="zoom:80%;"><p>可以用切比雪夫不等式近似拟合函数，输入该点的均值和方差，得到的结果为大于点t的函数值，其值不会超过一个上界，甚至不要求是正态分布，对于任意分布都可以这样解。切比雪夫不等式要求t在均值的右边，在左边就不准确了。</p><img src="/2021/12/22/Games202-Lecture4/image-20211221233234475.png" alt="image-20211221233234475" style="zoom:80%;"><p>基于以上步骤进行第三步PCF，生成深度图、深度平方图、mipmap、切比雪夫等均需要常数的时间复杂度，因此非常快。但是需要不断更新各种图，也会带来一定的开销。</p><img src="/2021/12/22/Games202-Lecture4/image-20211221233841525.png" alt="image-20211221233841525" style="zoom:80%;"><p>解决了第三步的PCF效率问题，我们回头来看第一步。第一步主要是为了找出在一定范围内的遮挡物深度，后面再做平均等操作。如图，假设shading point深度为7，则蓝色区域为遮挡物，红色区域为未遮挡。</p><img src="/2021/12/22/Games202-Lecture4/image-20211221234742608.png" alt="image-20211221234742608" style="zoom:80%;"><p>对于第一步的求平均深度，可以采用以下简化的方式快速得出：计算非遮挡物像素所占比例与非遮挡物平均深度，加上遮挡物像素所占比例与遮挡物平均深度乘积，得到的值就是整体的平均深度。两个像素所占的比例可以通过切比雪夫不等式近似快速得出，遮挡物平均深度已知，非遮挡物的平均深度<strong>直接近似为t</strong>！这个假设在shadow面为平面时十分适用。</p><img src="/2021/12/22/Games202-Lecture4/image-20211221235945042.png" alt="image-20211221235945042" style="zoom:80%;"><p>给你一张图，和图上的任何一个矩形区域，如何快速求出平均值？</p><img src="/2021/12/22/Games202-Lecture4/image-20211222000125746.png" alt="image-20211222000125746" style="zoom:80%;"><p>最简单的一定是mipmap，做<strong>快速、近似、方形的差值操作</strong>。层与层之间可以进行三线性差值求出中间层。</p><h1 id="SAT"><a href="#SAT" class="headerlink" title="SAT"></a>SAT</h1><img src="/2021/12/22/Games202-Lecture4/image-20211222000352092.png" alt="image-20211222000352092" style="zoom:80%;"><p>SAT（Sumed Area Table）采用前缀和的方式求平均，将范围内求平均转化为范围内求和的问题。SAT采用预处理的方式先求一遍前缀和，SAT上任何一个元素都代表原始数组从头加到当前位置的总和。可以采用相减的方式求中间任意一段和。</p><img src="/2021/12/22/Games202-Lecture4/image-20211222000945553.png" alt="image-20211222000945553" style="zoom:80%;"><p>对于二维情况，我们可以使用区域相加减的方式得出任意一个矩形区域的和。通过观察可以得出，相加减的项都是从左上角出发的。因此我们需要一张表，表中记录了从左上角到当前顶点的深度和。基于此，在计算中只需要查四次表就行了。实际上我们只需要先每一行中每一项进行相加计算前缀和，在此基础上每一列再分别计算前缀和，得到的即为一张SAT表。</p><h1 id="VSSM的改良"><a href="#VSSM的改良" class="headerlink" title="VSSM的改良"></a>VSSM的改良</h1><img src="/2021/12/22/Games202-Lecture4/image-20211222003724948.png" alt="image-20211222003724948" style="zoom:80%;"><p>VSSM基于了太多假设，正态分布对于有些情况并不适用。如图光线穿过孔洞，得到三个峰值，不可能用一个正态分布峰值去拟合。</p><img src="/2021/12/22/Games202-Lecture4/image-20211222003845515.png" alt="image-20211222003845515" style="zoom:80%;"><p>蓝色为实际遮挡物的深度分布，红色为正态分布拟合。可以看出我们假设有红色阴影区域的部分深度大，挡不住，但实际上只有蓝色阴影区域的很少一部分挡不住。对于镂空等形状这种误差尤为严重。</p><img src="/2021/12/22/Games202-Lecture4/image-20211222004059362.png" alt="image-20211222004059362" style="zoom:80%;"><p>车底很明显有很浅的阴影区域。</p><img src="/2021/12/22/Games202-Lecture4/image-20211222004246188.png" alt="image-20211222004246188" style="zoom:80%;"><p>对于以上问题，采用使用更高阶的矩来解决。</p><img src="/2021/12/22/Games202-Lecture4/image-20211222004315841.png" alt="image-20211222004315841" style="zoom:80%;"><p>最简单的矩，我们记录某一个数的各种次方，保留前多少阶的矩。对于VSSM，我们只用了前两阶的矩。</p><img src="/2021/12/22/Games202-Lecture4/image-20211222004633250.png" alt="image-20211222004633250" style="zoom:80%;"><p>保留前m个矩，可以使用阶跃函数保存m&#x2F;2个阶。正常情况下使用四阶矩就足够了。</p><img src="/2021/12/22/Games202-Lecture4/image-20211222004842455.png" alt="image-20211222004842455" style="zoom:80%;"><p>Moment Shadow Mapping做的工作就是在原VSSM的基础上做更高阶的矩 </p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Games202</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Games202-Lecture4 Real-Time-Shadow 1</title>
    <link href="/2021/12/21/Games202-Lecture3/"/>
    <url>/2021/12/21/Games202-Lecture3/</url>
    
    <content type="html"><![CDATA[<h1 id="Shadow-Mapping"><a href="#Shadow-Mapping" class="headerlink" title="Shadow Mapping"></a>Shadow Mapping</h1><img src="/2021/12/21/Games202-Lecture3/image-20211220193557002.png" alt="image-20211220193557002" style="zoom:80%;"><p>shadow mapping为一种二次渲染技术，对场景渲染两次。从光源发出光，统计光能够打到哪些地方，生成对应的深度图，即shadow map。再从人眼发出光，若人眼发出光照射的地方无法被光源直接打到，则为shadow。</p><img src="/2021/12/21/Games202-Lecture3/image-20211220193619592.png" alt="image-20211220193619592" style="zoom:80%;"><p>从光源位置看到的深度图，颜色越浅说明深度越大。</p><img src="/2021/12/21/Games202-Lecture3/image-20211220193128536.png" alt="image-20211220193128536" style="zoom:80%;"><p>由于Shadow Map记录的深度值不连续，会产生自遮挡现象，越倾斜越严重。可以引入一个可变长度值bias校正深度，光源倾斜角度越大，bias越大，在生成shadow时不考虑后面的bias深度。具体方式就是当一个点深度大于记录深度的值超过一个阈值时，我们才认为这个点在阴影内。这也是工业界使用较多的一个办法。但同时会产生阴影不连接的现象。</p><img src="/2021/12/21/Games202-Lecture3/image-20211220193058405.png" alt="image-20211220193058405" style="zoom:80%;"><p>可以建立两层深度（最小和次小），取均值，最后用均值图来算物体的遮挡关系，绘制shadow。但是要求材料有厚度，不能是单一平面，并且开销很大。</p><img src="/2021/12/21/Games202-Lecture3/image-20211220205844066.png" alt="image-20211220205844066" style="zoom:80%;"><p>Shadow Mapping第二个问题就是会产生锯齿。由于深度图是以像素绘制的，当投影到很远的平面时，自然会产生分辨率过低的问题，产生锯齿。</p><h1 id="积分近似化"><a href="#积分近似化" class="headerlink" title="积分近似化"></a>积分近似化</h1><img src="/2021/12/21/Games202-Lecture3/image-20211220194000037.png" alt="image-20211220194000037" style="zoom:80%;"><p>积分近似：将乘积的积分转化为积分的乘积。空分母为归一化常数。</p><p>等式成立条件（有一个成立即可）：</p><ol><li>g(x)的support(积分域)非常小</li><li>g(x)为光滑函数</li></ol><img src="/2021/12/21/Games202-Lecture3/image-20211220194558684.png" alt="image-20211220194558684" style="zoom:80%;"><p>此时我们把rendering equation代入这个约等式中，近似后，分解为visibility与shading的乘积。因此其表示的意义就是,我们计算每个点的shading，然后去乘这个点的visibility得到的就是最后的渲染结果。这也就是shadow mapping的基本思想。</p><img src="/2021/12/21/Games202-Lecture3/image-20211220195209116.png" alt="image-20211220195209116" style="zoom:80%;"><p>那么什么时候这个约等式比较正确呢？</p><ol><li><p>我们要控制积分域足够小，也就是说我们只有一个点光源或者方向光源。</p></li><li><p>我们要保证shading部分足够光滑，也就是说brdf的部分变化足够小，那么这个brdf部分是diffuse的。</p></li><li><p>我们还要保证光源各处的radience变化也不大，类似于一个面光源。</p></li></ol><h1 id="PCF与PCSS"><a href="#PCF与PCSS" class="headerlink" title="PCF与PCSS"></a>PCF与PCSS</h1><img src="/2021/12/21/Games202-Lecture3/image-20211220195814229.png" alt="image-20211220195814229" style="zoom:80%;"><p>Shadow Mapping只能获得硬阴影。PCF最开始是做抗锯齿后来被用作求软阴影，实质上就是做了个平均，但不是对已经有锯齿的阴影和Shadow Map做平均，而是在做阴影判断时做平均。</p><img src="/2021/12/21/Games202-Lecture3/image-20211220200445432.png" alt="image-20211220200445432" style="zoom:80%;"><p>PCF原理：人眼看到一点，从光源看向该点的时候不单单查找该点的深度，而是以n*n像素的范围从Shadow Map上查找深度，然后做平均。结果不再是非零即一，越远所做的模糊越大。filter的大小决定了阴影的软硬。</p><img src="/2021/12/21/Games202-Lecture3/image-20211220201629847.png" alt="image-20211220201629847" style="zoom:80%;"><p>我们可以发现，遮挡物blocker与阴影接受物receiver距离越远，阴影越软，因此可以通过相似三角形得到filter的可变大小，blocker就是深度图里的深度值。</p><img src="/2021/12/21/Games202-Lecture3/image-20211220203117042.png" alt="image-20211220203117042" style="zoom:80%;"><p>PCSS过程（开销非常大）：</p><ol><li>通过深度图确定平均blocker深度</li><li>通过blocker的深度确定filter的大小</li><li>做PCF</li></ol><img src="/2021/12/21/Games202-Lecture3/image-20211220204858659.png" alt="image-20211220204858659" style="zoom:80%;"><p>不能直接使用shadow map中对应单个点的深度来代表 blocker 距离,因为如果该点的深度与周围点的深度差距较大（遮挡物的表面陡峭或者对应点正好有一个孔洞），将会产生一个错误的效果,我们选择使用平均遮挡距离来代替，所以平常我们指的blocker depth其实是Average blocker depth.</p><p>blocker上的每个点距离光源的距离是不同的，深度也是不一样的。这里我们采用取平均深度的方式来表示blocker的深度。</p><p>求blocker距离的方法如下：</p><p>首先，我们把目标shading point 转换到light space 找到shading point在shadow map上对应的像素。</p><p>如果shading point的深度大于这个shadow map上点对应的深度,则说明shadow map上的点就是一个Blocker,然后我们取shadow map上这个点(像素)周围的一些像素，找出能够挡住shading point的点的像素,并求出他们的深度平均值作为blocker的深度。</p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Games202</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode Java 刷题笔记</title>
    <link href="/2021/11/09/LeetCode-Java-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/11/09/LeetCode-Java-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Easy题目"><a href="#LeetCode-Easy题目" class="headerlink" title="LeetCode_Easy题目"></a>LeetCode_Easy题目</h1><h2 id="题目一：数组中重复的数字"><a href="#题目一：数组中重复的数字" class="headerlink" title="题目一：数组中重复的数字"></a>题目一：数组中重复的数字</h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：<br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>]<br><br>输出：<br><span class="hljs-number">2</span> 或 <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ol><li><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4></li></ol><blockquote><p>利用数据结构特点，容易想到使用哈希表（Set）记录数组的各个数字，当查找到重复数字则直接返回。</p></blockquote><h5 id="算法流程："><a href="#算法流程：" class="headerlink" title="算法流程："></a>算法流程：</h5><ul><li><p>初始化： 新建 HashSet ，记为 <code>dic</code> ；</p></li><li><p>遍历数组 <code>nums</code> 中的每个数字 <code>num</code> ：</p></li><li><p>当 num 在 dic 中，说明重复，直接返回 <code>num</code> ；</p></li><li><p>将 <code>num</code> 添加至 <code>dic</code> 中，返回；</p></li></ul><h5 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h5><p>时间复杂度 <em><code>O(N)</code></em> ： 遍历数组使用 <em>O(N)</em> ，HashSet 添加与查找元素皆为 <em>O(1)</em> 。</p><p>空间复杂度 <em><code>O(N)</code></em> ： HashSet 占用 <em>O(N)</em> 大小的额外空间。</p><h5 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a>Java代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        Set&lt;Integer&gt; dic = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">if</span>(dic.contains(num)) <span class="hljs-keyword">return</span> num;<br>            dic.add(num);<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><h4 id="原地交换"><a href="#原地交换" class="headerlink" title="原地交换"></a>原地交换</h4></li></ol><blockquote><p>题目说明尚未被充分使用，即 <code>在一个长度为n的数组nums里的所有数字都在0~n-1的范围内</code>。 此说明含义：<code>数组元素的索引和值是一对多的关系</code>。因此，可遍历数组并通过交换操作，使元素的索引与值对应（即 <code>nums[i] = inums[i]=i</code> ）。因而，就能通过索引映射对应的值，起到与字典等价的作用。</p><p>遍历中，第一次遇到数字 xx 时，将其交换至索引 xx 处；而当第二次遇到数字 xx 时，一定有 <code>nums[x] = xnums[x]=x</code> ，此时即可得到一组重复数字。</p></blockquote><h5 id="算法流程：-1"><a href="#算法流程：-1" class="headerlink" title="算法流程："></a>算法流程：</h5><ul><li><p>遍历数组 <code>nums</code> ，设索引初始值为 <code>i = 0</code> :</p></li><li><p>若 <code>nums[i] = i</code> ： 说明此数字已在对应索引位置，无需交换，因此跳过；</p></li><li><p>若 <code>nums[nums[i]] = nums[i]</code> ： 代表索引 <code>nums[i]</code> 处和索引 <code>i</code> 处的元素值都为 <code>nums[i]</code> ，即找到一组重复值，返回此值 <code>nums[i]</code> ；</p></li><li><p>否则： 交换索引为 <code>i</code> 和 <code>nums[i]</code> 的元素值，将此数字交换至对应索引位置。</p></li></ul><h5 id="复杂度分析：-1"><a href="#复杂度分析：-1" class="headerlink" title="复杂度分析："></a>复杂度分析：</h5><p>时间复杂度 O(N) ： 遍历数组使用 O(N) ，每轮遍历的判断和交换操作使用 O(1) 。</p><p>空间复杂度 O(1) ： 使用常数复杂度的额外空间</p><h5 id="Java代码：-1"><a href="#Java代码：-1" class="headerlink" title="Java代码："></a>Java代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i &lt; nums.length) &#123;<br>            <span class="hljs-keyword">if</span>(nums[i] == i) &#123;<br>                i++;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(nums[nums[i]] == nums[i]) <span class="hljs-keyword">return</span> nums[i];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> nums[i];<br>            nums[i] = nums[tmp];<br>            nums[tmp] = tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="题目二：最长公共前缀"><a href="#题目二：最长公共前缀" class="headerlink" title="题目二：最长公共前缀"></a>题目二：最长公共前缀</h2><h3 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h3><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：strs = [<span class="hljs-string">&quot;flower&quot;</span>,<span class="hljs-string">&quot;flow&quot;</span>,<span class="hljs-string">&quot;flight&quot;</span>]<br>输出：<span class="hljs-string">&quot;fl&quot;</span><br><br>输入：strs = [<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;racecar&quot;</span>,<span class="hljs-string">&quot;car&quot;</span>]<br>输出：<span class="hljs-string">&quot;&quot;</span><br>解释：输入不存在公共前缀。<br></code></pre></td></tr></table></figure><h3 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h3><ol><li><h4 id="字符串遍历"><a href="#字符串遍历" class="headerlink" title="字符串遍历"></a>字符串遍历</h4></li></ol><blockquote><p>将结果初始化为第一个字符串，从第一个字符串开始两两进行比较，找出公共部分。</p></blockquote><h5 id="算法流程：-2"><a href="#算法流程：-2" class="headerlink" title="算法流程："></a>算法流程：</h5><ul><li>当字符串数组长度为 0 时则公共前缀为空，直接返回</li><li>令最长公共前缀 ans 的值为第一个字符串，进行初始化</li><li>遍历后面的字符串，依次将其与 ans 进行比较，两两找出公共前缀，最终结果即为最长公共前缀</li><li>如果查找过程中出现了 ans 为空的情况，则公共前缀不存在直接返回</li></ul><h5 id="复杂度分析：-2"><a href="#复杂度分析：-2" class="headerlink" title="复杂度分析："></a>复杂度分析：</h5><p>时间复杂度 <em><code>O(N)</code></em> ： N为所有字符串长度之和。</p><p>空间复杂度 <em><code>O(n)</code></em> ： n为第一个字符串长度。</p><h5 id="Java代码：-2"><a href="#Java代码：-2" class="headerlink" title="Java代码："></a>Java代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">longestCommonPrefix</span><span class="hljs-params">(String[] strs)</span> &#123;<br>        <span class="hljs-keyword">if</span>(strs.length == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> strs[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;i&lt;strs.length;i++) &#123;<br>            <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(;j&lt;ans.length() &amp;&amp; j &lt; strs[i].length();j++) &#123;<br>                <span class="hljs-keyword">if</span>(ans.charAt(j) != strs[i].charAt(j))<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            ans = ans.substring(<span class="hljs-number">0</span>, j);<br>            <span class="hljs-keyword">if</span>(ans.equals(<span class="hljs-string">&quot;&quot;</span>))<br>                <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><h4 id="比较最大最小字符串-Python"><a href="#比较最大最小字符串-Python" class="headerlink" title="比较最大最小字符串(Python)"></a>比较最大最小字符串(Python)</h4></li></ol><blockquote><p>利用python的max()和min()，在Python里字符串是可以比较的，按照ascII值来进行排序，举例abb， aba，abac，最大为abb，最小为aba。所以只需要比较最大最小的公共前缀就是整个数组的公共前缀。</p></blockquote><h5 id="算法流程：-3"><a href="#算法流程：-3" class="headerlink" title="算法流程："></a>算法流程：</h5><ul><li><p>遍历，找到最长和最短字符串；</p></li><li><p>提取最长和最短字符串的公共前缀，返回；</p></li></ul><h5 id="复杂度分析：-3"><a href="#复杂度分析：-3" class="headerlink" title="复杂度分析："></a>复杂度分析：</h5><p>时间复杂度 O(N) ： N为字符串个数 。</p><h5 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a>Python代码：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">longestCommonPrefix</span>(<span class="hljs-params">self, strs</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> strs: <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>    s1 = <span class="hljs-built_in">min</span>(strs)<br>    s2 = <span class="hljs-built_in">max</span>(strs)<br>    <span class="hljs-keyword">for</span> i,x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s1):<br>        <span class="hljs-keyword">if</span> x != s2[i]:<br>            <span class="hljs-keyword">return</span> s2[:i]<br>    <span class="hljs-keyword">return</span> s1<br></code></pre></td></tr></table></figure><hr><h2 id="题目三：回文数"><a href="#题目三：回文数" class="headerlink" title="题目三：回文数"></a>题目三：回文数</h2><h3 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：x = <span class="hljs-number">121</span><br>输出：<span class="hljs-literal">true</span><br><br>输入：x = -<span class="hljs-number">121</span><br>输出：<span class="hljs-literal">false</span><br>解释：从左向右读, 为 -<span class="hljs-number">121</span> 。 从右向左读, 为 <span class="hljs-number">121</span>- 。因此它不是一个回文数。<br></code></pre></td></tr></table></figure><h3 id="解题思路：-2"><a href="#解题思路：-2" class="headerlink" title="解题思路："></a>解题思路：</h3><ol><li><h4 id="字符串遍历-1"><a href="#字符串遍历-1" class="headerlink" title="字符串遍历"></a>字符串遍历</h4></li></ol><blockquote><p>将输入int型数据转化为字符串进行双指针处理。</p></blockquote><h5 id="算法流程：-4"><a href="#算法流程：-4" class="headerlink" title="算法流程："></a>算法流程：</h5><ul><li>读入数据，判断正负，若为负直接返回False；</li><li>将数据转化为字符串；</li><li>设置两个指针，分别从字符串开头和结尾进行遍历比较，若发现不同则返回False；</li><li>指针汇合，说明字符串为回文串，返回True；</li></ul><h5 id="复杂度分析：-4"><a href="#复杂度分析：-4" class="headerlink" title="复杂度分析："></a>复杂度分析：</h5><p>时间复杂度 <em><code>O(N)</code></em> ： N 为字符串长度 。</p><p>空间复杂度 <em><code>O(N)</code></em> ： 将int型数据转化为字符串开辟了 N 的额外空间。</p><h5 id="Java代码：-3"><a href="#Java代码：-3" class="headerlink" title="Java代码："></a>Java代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>    String s=Integer.toString(num);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=s.length()-<span class="hljs-number">1</span>;i&lt;j;i++,j--)&#123;<br>        <span class="hljs-keyword">if</span>(s.charAt(i)!=s.charAt(j))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Scanner input=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-type">int</span> num=input.nextInt();<br>    <span class="hljs-keyword">if</span>(num&lt;<span class="hljs-number">0</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;False&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(test(num)) &#123;<br>        System.out.println(<span class="hljs-string">&quot;True&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;False&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><h4 id="数学解法"><a href="#数学解法" class="headerlink" title="数学解法"></a>数学解法</h4></li></ol><blockquote><p>通过取整和取余操作获取整数中对应的数字进行比较。</p></blockquote><h5 id="算法流程：-5"><a href="#算法流程：-5" class="headerlink" title="算法流程："></a>算法流程：</h5><ul><li>判断此数的为数，计入<code>div</code>；</li><li>使用除法和取余的方式取出数的第一位和最后一位进行比较，若不相等则返回<code>False</code>；</li><li>使用除法和取余的方式取出此数的中间位，继续循环处理；</li><li>循环结束，返回<code>true</code></li></ul><h5 id="复杂度分析：-5"><a href="#复杂度分析：-5" class="headerlink" title="复杂度分析："></a>复杂度分析：</h5><p>时间复杂度 O(N) ： 遍历数组使用 O(N)  。</p><h5 id="Java代码：-4"><a href="#Java代码：-4" class="headerlink" title="Java代码："></a>Java代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-comment">//边界判断</span><br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">div</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-keyword">while</span> (x / div &gt;= <span class="hljs-number">10</span>) div *= <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> x / div;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> x % <span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">if</span> (left != right) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            x = (x % div) / <span class="hljs-number">10</span>;<br>            div /= <span class="hljs-number">100</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="题目四：删除数组中的重复项"><a href="#题目四：删除数组中的重复项" class="headerlink" title="题目四：删除数组中的重复项"></a>题目四：删除数组中的重复项</h2><h3 id="题目描述：-3"><a href="#题目描述：-3" class="headerlink" title="题目描述："></a>题目描述：</h3><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：<br><span class="hljs-string">[2, 3, 1, 0, 2, 5, 3]</span><br><br>输出：<br><span class="hljs-number">2</span> 或 <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="解题思路：-3"><a href="#解题思路：-3" class="headerlink" title="解题思路："></a>解题思路：</h3><ol><li><h4 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4></li></ol><blockquote><p>考虑用 2 个指针，一个在前记作 <code>p</code>，一个在后记作 <code>q</code>，通过比较来移动两个指针的位置。</p></blockquote><h5 id="算法流程：-6"><a href="#算法流程：-6" class="headerlink" title="算法流程："></a>算法流程：</h5><ul><li>比较 p 和 q 位置的元素是否相等。如果相等，q 后移 1 位</li><li>如果不相等，将 q 位置的元素复制到 p+1 位置上，p 后移一位，q 后移 1 位</li><li>重复上述过程，直到 q 等于数组长度</li><li>返回 p + 1，即为新数组长度。</li></ul><h5 id="复杂度分析：-6"><a href="#复杂度分析：-6" class="headerlink" title="复杂度分析："></a>复杂度分析：</h5><p>时间复杂度 <em><code>O(N)</code></em> ： 遍历数组使用 <em>O(N)</em> 。</p><p>空间复杂度 <em><code>O(1)</code></em> ： 原地操作，没有额外空间。</p><h5 id="Java代码：-5"><a href="#Java代码：-5" class="headerlink" title="Java代码："></a>Java代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-keyword">if</span>(nums == <span class="hljs-literal">null</span> || nums.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(q &lt; nums.length)&#123;<br>        <span class="hljs-keyword">if</span>(nums[p] != nums[q])&#123;<br>            nums[p + <span class="hljs-number">1</span>] = nums[q];<br>            p++;<br>        &#125;<br>        q++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><h4 id="对双指针算法的优化"><a href="#对双指针算法的优化" class="headerlink" title="对双指针算法的优化"></a>对双指针算法的优化</h4></li></ol><blockquote><p>当数组本身就没有重复元素时，按照上面的方法，每次比较时 nums[p] 都不等于 nums[q]，因此就会将 q 指向的元素原地复制一遍，这个操作其实是不必要的。因此我们可以添加一个小判断，当 q - p &gt; 1 时，才进行复制。</p></blockquote><h5 id="Java代码：-6"><a href="#Java代码：-6" class="headerlink" title="Java代码："></a>Java代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-keyword">if</span>(nums == <span class="hljs-literal">null</span> || nums.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(q &lt; nums.length)&#123;<br>        <span class="hljs-keyword">if</span>(nums[p] != nums[q])&#123;<br>            <span class="hljs-keyword">if</span>(q - p &gt; <span class="hljs-number">1</span>)&#123;<br>                nums[p + <span class="hljs-number">1</span>] = nums[q];<br>            &#125;<br>            p++;<br>        &#125;<br>        q++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="题目五：判断两个树相等"><a href="#题目五：判断两个树相等" class="headerlink" title="题目五：判断两个树相等"></a>题目五：判断两个树相等</h2><h3 id="题目描述：-4"><a href="#题目描述：-4" class="headerlink" title="题目描述："></a>题目描述：</h3><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：<br><span class="hljs-string">[2, 3, 1, 0, 2, 5, 3]</span><br><br>输出：<br><span class="hljs-number">2</span> 或 <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="解题思路：-4"><a href="#解题思路：-4" class="headerlink" title="解题思路："></a>解题思路：</h3><blockquote><p>利用深度优先遍历，当满足终止条件时进行返回，不满足时分别判断左子树和右子树是否相同，其中要注意代码中的短路效应</p></blockquote><h5 id="算法流程：-7"><a href="#算法流程：-7" class="headerlink" title="算法流程："></a>算法流程：</h5><ul><li>当两棵树的当前节点都为 null 时返回 true</li><li>当其中一个为 null 另一个不为 null 时返回 false</li><li>当两个都不为空但是值不相等时，返回 false</li><li>深度优先搜索</li></ul><h5 id="复杂度分析：-7"><a href="#复杂度分析：-7" class="headerlink" title="复杂度分析："></a>复杂度分析：</h5><p>时间复杂度 <em><code>O(N)</code></em> ： N为树的节点个数 。</p><h5 id="Java代码：-7"><a href="#Java代码：-7" class="headerlink" title="Java代码："></a>Java代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSameTree</span><span class="hljs-params">(TreeNode p, TreeNode q)</span> &#123;<br>        <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">null</span> &amp;&amp; q == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">null</span> || q == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(p.val != q.val)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="LeetCode-Middle题目"><a href="#LeetCode-Middle题目" class="headerlink" title="LeetCode_Middle题目"></a>LeetCode_Middle题目</h1><h2 id="题目六：三数之和"><a href="#题目六：三数之和" class="headerlink" title="题目六：三数之和"></a>题目六：三数之和</h2><h3 id="题目描述：-5"><a href="#题目描述：-5" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个包含 n 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <code>a，b，c</code> ，使得 <code>a + b + c = 0</code> ？请你找出所有和为 0 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：nums = [-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">4</span>]<br>输出：[[-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]]<br><br>输入：nums = []<br>输出：[]<br></code></pre></td></tr></table></figure><h3 id="解题思路：-5"><a href="#解题思路：-5" class="headerlink" title="解题思路："></a>解题思路：</h3><h4 id="双指针法："><a href="#双指针法：" class="headerlink" title="双指针法："></a>双指针法：</h4><blockquote><p>拿这个nums数组来举例，首先将数组排序，然后有一层for循环，i从下标0的地方开始，同时定一个下标left 定义在i+1的位置上，定义下标right 在数组结尾的位置上。</p><p>依然还是在数组中找到 abc 使得<code>a + b +c =0</code>，我们这里相当于 <code>a = nums[i] b = nums[left] c = nums[right]</code>。</p><p>接下来如何移动left 和right呢， 如果<code>nums[i] + nums[left] + nums[right] &gt; 0</code> 就说明 此时三数之和大了，因为数组是排序后了，所以right下标就应该向左移动，这样才能让三数之和小一些。</p><p>如果 <code>nums[i] + nums[left] + nums[right] &lt; 0</code> 说明 此时 三数之和小了，left 就向右移动，才能让三数之和大一些，直到left与right相遇为止。</p></blockquote><h5 id="复杂度分析：-8"><a href="#复杂度分析：-8" class="headerlink" title="复杂度分析："></a>复杂度分析：</h5><p>时间复杂度 <em><code>O(N*N)</code></em> ： 数组遍历 。</p><h5 id="Java代码：-8"><a href="#Java代码：-8" class="headerlink" title="Java代码："></a>Java代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Arrays.sort(nums);<span class="hljs-comment">//对数组进行排序</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-comment">//排序之后如果第一个元素已经大于零，那么无论如何组合都不可能凑成三元组，直接返回结果就可以了</span><br>            <span class="hljs-keyword">if</span> (nums[i] &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//判断时注意i&gt;0,防止漏掉两个负数的情况</span><br>            &#125;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;<span class="hljs-comment">//设置左右指针</span><br>            <span class="hljs-comment">//移动左右指针来寻找和为零</span><br>            <span class="hljs-keyword">while</span> (right &gt; left) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> nums[i] + nums[left] + nums[right];<br>                <span class="hljs-keyword">if</span> (sum &gt; <span class="hljs-number">0</span>) &#123;<br>                    right--;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &lt; <span class="hljs-number">0</span>) &#123;<br>                    left++;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));<br><span class="hljs-comment">//去重</span><br>                    <span class="hljs-keyword">while</span> (right &gt; left &amp;&amp; nums[right] == nums[right - <span class="hljs-number">1</span>]) right--;<br>                    <span class="hljs-keyword">while</span> (right &gt; left &amp;&amp; nums[left] == nums[left + <span class="hljs-number">1</span>]) left++;<br>                    right--;<br>                    left++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="题目七：两数之和"><a href="#题目七：两数之和" class="headerlink" title="题目七：两数之和"></a>题目七：两数之和</h2><h3 id="题目描述：-6"><a href="#题目描述：-6" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：l1 = [<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>], l2 = [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>]<br>输出：[<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>]<br>解释：<span class="hljs-number">342</span> + <span class="hljs-number">465</span> = <span class="hljs-number">807.</span><br><br>输入：l1 = [<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>], l2 = [<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>]<br>输出：[<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h3 id="解题思路：-6"><a href="#解题思路：-6" class="headerlink" title="解题思路："></a>解题思路：</h3><h4 id="双指针法：-1"><a href="#双指针法：-1" class="headerlink" title="双指针法："></a>双指针法：</h4><blockquote><p>正常的多位数相加，就是从个位相加，逢十进一。题目输入的两个链表正好是反转过来的，链表头正好为个位，所以可以直接使用两个指针，一起从两个链表的相同位进行遍历相加，相加的结果存入一个动态创建的新链表。采用一个变量k来存储进位。本题难点在于如何处理不同位数相加和进位问题。</p></blockquote><h5 id="复杂度分析：-9"><a href="#复杂度分析：-9" class="headerlink" title="复杂度分析："></a>复杂度分析：</h5><p>时间复杂度 <em><code>O(N)</code></em> ： N为两个链表之中最长的那个长度 。</p><p>空间复杂度 <em><code>O(N)</code></em> ： N为两个链表之中最长的那个长度 。</p><h5 id="Java代码：-9"><a href="#Java代码：-9" class="headerlink" title="Java代码："></a>Java代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        ListNode head= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>);<br>        ListNode tmp=head;<br>        <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<span class="hljs-comment">//初始进位值为0</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>)&#123;<br>                tmp.val++;<span class="hljs-comment">//如果有进位，则先加一</span><br>            &#125;<br>            <span class="hljs-type">int</span> a=l1.val+l2.val;<br>            <span class="hljs-keyword">if</span>(a+k&gt;=<span class="hljs-number">10</span>)&#123;<br>                tmp.val+=a-<span class="hljs-number">10</span>;<span class="hljs-comment">//如果两数之和大于10，则减去10后进一</span><br>                k=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                tmp.val+=a;<br>                k=<span class="hljs-number">0</span>;<span class="hljs-comment">//如果两数之和小于10，则正常相加</span><br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(l1.next==<span class="hljs-literal">null</span>||l2.next==<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//如果加到一个链表的末尾则退出</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            l1=l1.next;<span class="hljs-comment">//进行下一位的相加</span><br>            l2=l2.next;<br>            tmp.next= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>);<br>            tmp=tmp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(l1.next==<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//判断哪个链表还没加完，继续相加，注意进位</span><br>            <span class="hljs-keyword">while</span>(l2.next!=<span class="hljs-literal">null</span>)&#123;<br>                l2=l2.next;<br>                tmp.next= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>);<br>                tmp=tmp.next;<br>                tmp.val=tmp.val+l2.val+k;<br>                <span class="hljs-keyword">if</span>(tmp.val&gt;=<span class="hljs-number">10</span>)&#123;<br>                    tmp.val-=<span class="hljs-number">10</span>;<br>                    k=<span class="hljs-number">1</span>;&#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    k=<span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">while</span>(l1.next!=<span class="hljs-literal">null</span>)&#123;<br>                l1=l1.next;<br>                tmp.next= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>);<br>                tmp=tmp.next;<br>                tmp.val=tmp.val+l1.val+k;<br>                <span class="hljs-keyword">if</span>(tmp.val&gt;=<span class="hljs-number">10</span>)&#123;<br>                    tmp.val-=<span class="hljs-number">10</span>;<br>                    k=<span class="hljs-number">1</span>;&#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    k=<span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//如果最后仍有进位，则继续进位</span><br>            tmp.next= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>);<br>            tmp=tmp.next;<br>            tmp.val=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="题目八：删除链表的倒数第N个节点"><a href="#题目八：删除链表的倒数第N个节点" class="headerlink" title="题目八：删除链表的倒数第N个节点"></a>题目八：删除链表的倒数第N个节点</h2><h3 id="题目描述：-7"><a href="#题目描述：-7" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p><p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：head = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>], n = <span class="hljs-number">2</span><br>输出：[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>]<br><br>输入：head = [<span class="hljs-number">1</span>], n = <span class="hljs-number">1</span><br>输出：[]<br></code></pre></td></tr></table></figure><h3 id="解题思路：-7"><a href="#解题思路：-7" class="headerlink" title="解题思路："></a>解题思路：</h3><h4 id="双指针法：-2"><a href="#双指针法：-2" class="headerlink" title="双指针法："></a>双指针法：</h4><blockquote><p>仍然采用双指针法来解决。首先设置两个指针指向头结点，使第一个指针向后移动<code>n</code>位，注意判断边界条件。若下一个节点为空，则直接返回头结点的下一个节点（删除头结点)。然后令两个指针同步向后移动，当前面的指针移动到末尾，删除后面指针的下一个节点，返回头结点。</p></blockquote><h5 id="复杂度分析：-10"><a href="#复杂度分析：-10" class="headerlink" title="复杂度分析："></a>复杂度分析：</h5><p>时间复杂度 <em><code>O(N*N)</code></em> ： 数组遍历 。</p><h5 id="Java代码：-10"><a href="#Java代码：-10" class="headerlink" title="Java代码："></a>Java代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> &#123;<br>        ListNode n11=head;<br>        ListNode n22=head;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(n11.next!=<span class="hljs-literal">null</span>)&#123;<br>            n11=n11.next;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                head=head.next;<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(n11.next!=<span class="hljs-literal">null</span>)&#123;<br>            n11=n11.next;<br>            n22=n22.next;<br>        &#125;<br>        n22.next=n22.next.next;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="题目九：搜索最长回文串"><a href="#题目九：搜索最长回文串" class="headerlink" title="题目九：搜索最长回文串"></a>题目九：搜索最长回文串</h2><h3 id="题目描述：-8"><a href="#题目描述：-8" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：s = <span class="hljs-string">&quot;babad&quot;</span><br>输出：<span class="hljs-string">&quot;bab&quot;</span><br>解释：<span class="hljs-string">&quot;aba&quot;</span> 同样是符合题意的答案。<br><br>输入：s = <span class="hljs-string">&quot;cbbd&quot;</span><br>输出：<span class="hljs-string">&quot;bb&quot;</span><br></code></pre></td></tr></table></figure><h3 id="解题思路：-8"><a href="#解题思路：-8" class="headerlink" title="解题思路："></a>解题思路：</h3><h4 id="空间换时间："><a href="#空间换时间：" class="headerlink" title="空间换时间："></a>空间换时间：</h4><blockquote><p>从每一个位置出发，向两边扩散即可。遇到不是回文的时候结束。举个例子，<code>str = acdbbdaa</code> 我们需要寻找从第一个 b（位置为 33）出发最长回文串为多少。怎么寻找？</p><p>首先往左寻找与当期位置相同的字符，直到遇到不相等为止。</p><p>然后往右寻找与当期位置相同的字符，直到遇到不相等为止。</p><p>最后左右双向扩散，直到左和右不相等。</p><p>每个位置向两边扩散都会出现一个窗口大小（len）。如果 <code>len&gt;maxLen</code>(用来表示最长回文串的长度）。则更新 <code>maxLen</code> 的值。</p><p>因为我们最后要返回的是具体子串，而不是长度，因此，还需要记录一下 <code>maxLen</code> 时的起始位置（maxStart），即此时还要 <code>maxStart=len</code>。</p><p>优化：</p><p>中心扩散的方法，其实做了很多重复计算。动态规划就是为了减少重复计算的问题。动态规划听起来很高大上。其实说白了就是空间换时间，将计算结果暂存起来，避免重复计算。作用和工程中用 redis 做缓存有异曲同工之妙。</p><p>我们用一个 <code>boolean dp[r][r]</code> 表示字符串从 i 到 j 这段是否为回文。试想如果 <code>dp[l][r]=true</code>，我们要判断 <code>dp[l-1][r+1]</code> 是否为回文。只需要判断字符串在(l-1)和（r+1)两个位置是否为相同的字符，是不是减少了很多重复计算。</p><p>进入正题，动态规划关键是找到初始状态和状态转移方程。</p><p>初始状态，<code>l=r</code> 时，此时 <code>dp[l][r]=true</code>。</p><p>状态转移方程，<code>dp=true</code> 并且(l-1)和（r+1)两个位置为相同的字符，此时 <code>dp[l-1][r+1]=true</code>。</p></blockquote><h5 id="复杂度分析：-11"><a href="#复杂度分析：-11" class="headerlink" title="复杂度分析："></a>复杂度分析：</h5><p>时间复杂度 <em><code>O(N*N)</code></em> ： 两重循环遍历 。</p><h5 id="Java代码：-11"><a href="#Java代码：-11" class="headerlink" title="Java代码："></a>Java代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">longestPalindrome</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.length() &lt; <span class="hljs-number">2</span>) &#123;<span class="hljs-comment">//长度小于2直接返回</span><br>            <span class="hljs-keyword">return</span> s;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">strLen</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxStart</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//最长回文串的起点</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxEnd</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;    <span class="hljs-comment">//最长回文串的终点</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">//最长回文串的长度</span><br><br>        <span class="hljs-type">boolean</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[strLen][strLen];<span class="hljs-comment">//创建统计二维数组</span><br>acdbbdaa<br>        <span class="hljs-title function_">for</span> <span class="hljs-params">(<span class="hljs-type">int</span> r = <span class="hljs-number">1</span>; r &lt; strLen; r++)</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; l &lt; r; l++) &#123;<br>                <span class="hljs-keyword">if</span> (s.charAt(l) == s.charAt(r) &amp;&amp; (r - l &lt;= <span class="hljs-number">2</span> || dp[l + <span class="hljs-number">1</span>][r - <span class="hljs-number">1</span>])) &#123;<span class="hljs-comment">//两个指针指向的字符相等，且内部字符也相等</span><br>                    dp[l][r] = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">if</span> (r - l + <span class="hljs-number">1</span> &gt; maxLen) &#123;<span class="hljs-comment">//更新maxLen</span><br>                        maxLen = r - l + <span class="hljs-number">1</span>;<br>                        maxStart = l;<br>                        maxEnd = r;<br><br>                    &#125;<br>                &#125;<br><br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> s.substring(maxStart, maxEnd + <span class="hljs-number">1</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><hr><h2 id="题目十：合并区间"><a href="#题目十：合并区间" class="headerlink" title="题目十：合并区间"></a>题目十：合并区间</h2><h3 id="题目描述：-9"><a href="#题目描述：-9" class="headerlink" title="题目描述："></a>题目描述：</h3><p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [starti, endi]</code> 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：intervals = [[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">8</span>,<span class="hljs-number">10</span>],[<span class="hljs-number">15</span>,<span class="hljs-number">18</span>]]<br>输出：[[<span class="hljs-number">1</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">8</span>,<span class="hljs-number">10</span>],[<span class="hljs-number">15</span>,<span class="hljs-number">18</span>]]<br>解释：区间 [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>] 和 [<span class="hljs-number">2</span>,<span class="hljs-number">6</span>] 重叠, 将它们合并为 [<span class="hljs-number">1</span>,<span class="hljs-number">6</span>].<br><br>输入：intervals = [[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]]<br>输出：[[<span class="hljs-number">1</span>,<span class="hljs-number">5</span>]]<br>解释：区间 [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>] 和 [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>] 可被视为重叠区间。<br></code></pre></td></tr></table></figure><h3 id="解题思路：-9"><a href="#解题思路：-9" class="headerlink" title="解题思路："></a>解题思路：</h3><blockquote><p>见注释</p></blockquote><h5 id="复杂度分析：-12"><a href="#复杂度分析：-12" class="headerlink" title="复杂度分析："></a>复杂度分析：</h5><p>时间复杂度 <em><code>O(Nlogn)</code></em> ： 一次遍历，排序需要 <em>O(nlogn)</em> 。</p><h5 id="Java代码：-12"><a href="#Java代码：-12" class="headerlink" title="Java代码："></a>Java代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] merge(<span class="hljs-type">int</span>[][] intervals) &#123;<br>        <span class="hljs-comment">// 先按照区间起始位置排序</span><br>        Arrays.sort(intervals, (v1, v2) -&gt; v1[<span class="hljs-number">0</span>] - v2[<span class="hljs-number">0</span>]);<br>        <span class="hljs-comment">// 遍历区间</span><br>        <span class="hljs-type">int</span>[][] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[intervals.length][<span class="hljs-number">2</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] interval: intervals) &#123;<br>            <span class="hljs-comment">// 如果结果数组是空的，或者当前区间的起始位置 &gt; 结果数组中最后区间的终止位置，</span><br>            <span class="hljs-comment">// 则不合并，直接将当前区间加入结果数组。</span><br>            <span class="hljs-keyword">if</span> (idx == -<span class="hljs-number">1</span> || interval[<span class="hljs-number">0</span>] &gt; res[idx][<span class="hljs-number">1</span>]) &#123;<br>                res[++idx] = interval;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 反之将当前区间合并至结果数组的最后区间</span><br>                res[idx][<span class="hljs-number">1</span>] = Math.max(res[idx][<span class="hljs-number">1</span>], interval[<span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Arrays.copyOf(res, idx + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="题目十一：最长连续序列"><a href="#题目十一：最长连续序列" class="headerlink" title="题目十一：最长连续序列"></a>题目十一：最长连续序列</h2><h3 id="题目描述：-10"><a href="#题目描述：-10" class="headerlink" title="题目描述："></a>题目描述：</h3><p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [starti, endi]</code> 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：intervals = [[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">8</span>,<span class="hljs-number">10</span>],[<span class="hljs-number">15</span>,<span class="hljs-number">18</span>]]<br>输出：[[<span class="hljs-number">1</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">8</span>,<span class="hljs-number">10</span>],[<span class="hljs-number">15</span>,<span class="hljs-number">18</span>]]<br>解释：区间 [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>] 和 [<span class="hljs-number">2</span>,<span class="hljs-number">6</span>] 重叠, 将它们合并为 [<span class="hljs-number">1</span>,<span class="hljs-number">6</span>].<br><br>输入：intervals = [[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]]<br>输出：[[<span class="hljs-number">1</span>,<span class="hljs-number">5</span>]]<br>解释：区间 [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>] 和 [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>] 可被视为重叠区间。<br></code></pre></td></tr></table></figure><h3 id="解题思路：-10"><a href="#解题思路：-10" class="headerlink" title="解题思路："></a>解题思路：</h3><blockquote><p>本题的关键在于如何查找到当前元素的左右元素。采用Set数据结构进行查找。首先将数组元素写入hashset表中，然后从一个元素开始依次移除它左右的数字，若移除成功代表数组中确实存在，那么继续查找下一个。采用一个current变量存储当前的区间范围，比较之后将结果存储到currentlongest中。</p></blockquote><h5 id="。复杂度分析："><a href="#。复杂度分析：" class="headerlink" title="。复杂度分析："></a>。复杂度分析：</h5><p>时间复杂度 <em><code>O(N)</code></em> ： 一次遍历，hashset查找效率为<em>O(1)</em> 。</p><h5 id="Java代码：-13"><a href="#Java代码：-13" class="headerlink" title="Java代码："></a>Java代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestConsecutive</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        Set&lt;Integer&gt; numsSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Integer num : nums) &#123;<br>            numsSet.add(num);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">longest</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Integer num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (numsSet.remove(num)) &#123;<br>                <span class="hljs-comment">// 向当前元素的左边搜索,eg: 当前为100, 搜索：99，98，97,...</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">currentLongest</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> num;<br>                <span class="hljs-keyword">while</span> (numsSet.remove(current - <span class="hljs-number">1</span>)) &#123;<br>                    current--;<br>                &#125;<br>                currentLongest += (num - current);<br><span class="hljs-comment">// 向当前元素的右边搜索,eg: 当前为100, 搜索：101，102，103,...</span><br>                current = num;<br>                <span class="hljs-keyword">while</span>(numsSet.remove(current + <span class="hljs-number">1</span>)) current++;<br>                currentLongest += (current - num);<br>        <span class="hljs-comment">// 搜索完后更新longest.</span><br>                longest = Math.max(longest, currentLongest);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> longest;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="题目十二：检查网格中是否存在有效路径"><a href="#题目十二：检查网格中是否存在有效路径" class="headerlink" title="题目十二：检查网格中是否存在有效路径"></a>题目十二：检查网格中是否存在有效路径</h2><h3 id="题目描述：-11"><a href="#题目描述：-11" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个 m x n 的网格 grid。网格里的每个单元都代表一条街道。grid[i][j] 的街道可以是：</p><ul><li>1 表示连接左单元格和右单元格的街道。</li><li>2 表示连接上单元格和下单元格的街道。</li><li>3 表示连接左单元格和下单元格的街道。</li><li>4 表示连接右单元格和下单元格的街道。</li><li>5 表示连接左单元格和上单元格的街道。</li><li>6 表示连接右单元格和上单元格的街道。</li></ul><p>你最开始从左上角的单元格 (0,0) 开始出发，网格中的「有效路径」是指从左上方的单元格 (0,0) 开始、一直到右下方的 (m-1,n-1) 结束的路径。该路径必须只沿着街道走。</p><p>注意：你不能变更街道。</p><p>如果网格中存在有效的路径，则返回 <code>true</code>，否则返回 <code>false</code> 。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：grid = [[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>]]<br>输出：<span class="hljs-literal">true</span><br>解释：如图所示，你可以从 (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>) 开始，访问网格中的所有单元格并到达 (m - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>) 。<br><br>输入：grid = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]]<br>输出：<span class="hljs-literal">false</span><br>解释：如图所示，单元格 (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>) 上的街道没有与任何其他单元格上的街道相连，你只会停在 (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>) 处。<br><br>输入：grid = [[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]]<br>输出：<span class="hljs-literal">false</span><br>解释：你会停在 (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)，而且无法到达 (<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) 。<br></code></pre></td></tr></table></figure><h3 id="解题思路：-11"><a href="#解题思路：-11" class="headerlink" title="解题思路："></a>解题思路：</h3><blockquote><p>采用DFS优先搜索来防止死胡同的情况。每个单元格下一步要走向哪，依据的是当前单元格的数字(1~6),而且，能不能到达当前单元格指向的两个方向的下一个单元格，又依赖于下一个单元格是否有口与当前单元格连通，举个例子吧。假设当前单元格是1，那么可以往左走，也可以往右走，如果往左走的话，则只有(1, 4, 6)可以接的上去。右边与其他数字同理。</p></blockquote><h5 id="。复杂度分析：-1"><a href="#。复杂度分析：-1" class="headerlink" title="。复杂度分析："></a>。复杂度分析：</h5><p>时间复杂度 <em><code>O(N*N)</code></em> ： 深度优先搜索 。</p><h5 id="Java代码：-14"><a href="#Java代码：-14" class="headerlink" title="Java代码："></a>Java代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">boolean</span> [][]vis;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasValidPath</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] grid)</span> &#123;<br>        vis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[grid.length][grid[<span class="hljs-number">0</span>].length];<br>        dfs(grid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> vis[grid.length-<span class="hljs-number">1</span>][grid[<span class="hljs-number">0</span>].length-<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] grid , <span class="hljs-type">int</span> x , <span class="hljs-type">int</span> y)</span>&#123;<br>        <span class="hljs-keyword">if</span>(vis[x][y]) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">//System.out.println(x+&quot; &quot;+y);</span><br>        vis[x][y] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(grid[x][y]==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(isok(grid,x,y-<span class="hljs-number">1</span>) &amp;&amp; (grid[x][y-<span class="hljs-number">1</span>]==<span class="hljs-number">1</span> || grid[x][y-<span class="hljs-number">1</span>]==<span class="hljs-number">4</span> || grid[x][y-<span class="hljs-number">1</span>]==<span class="hljs-number">6</span>))<br>                dfs(grid,x,y-<span class="hljs-number">1</span>);    <span class="hljs-comment">//左</span><br>            <span class="hljs-keyword">if</span>(isok(grid,x,y+<span class="hljs-number">1</span>) &amp;&amp; (grid[x][y+<span class="hljs-number">1</span>]==<span class="hljs-number">1</span> || grid[x][y+<span class="hljs-number">1</span>]==<span class="hljs-number">3</span> || grid[x][y+<span class="hljs-number">1</span>]==<span class="hljs-number">5</span>))<br>                dfs(grid,x,y+<span class="hljs-number">1</span>);    <span class="hljs-comment">//右</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(grid[x][y]==<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>(isok(grid,x-<span class="hljs-number">1</span>,y) &amp;&amp; (grid[x-<span class="hljs-number">1</span>][y]==<span class="hljs-number">2</span> || grid[x-<span class="hljs-number">1</span>][y]==<span class="hljs-number">3</span> || grid[x-<span class="hljs-number">1</span>][y]==<span class="hljs-number">4</span>))<br>                dfs(grid,x-<span class="hljs-number">1</span>,y);    <span class="hljs-comment">//上</span><br>            <span class="hljs-keyword">if</span>(isok(grid,x+<span class="hljs-number">1</span>,y) &amp;&amp; (grid[x+<span class="hljs-number">1</span>][y]==<span class="hljs-number">2</span> || grid[x+<span class="hljs-number">1</span>][y]==<span class="hljs-number">5</span> || grid[x+<span class="hljs-number">1</span>][y]==<span class="hljs-number">6</span>))<br>                dfs(grid,x+<span class="hljs-number">1</span>,y);    <span class="hljs-comment">//下</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(grid[x][y]==<span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">if</span>(isok(grid,x,y-<span class="hljs-number">1</span>) &amp;&amp; (grid[x][y-<span class="hljs-number">1</span>]==<span class="hljs-number">1</span> || grid[x][y-<span class="hljs-number">1</span>]==<span class="hljs-number">4</span> || grid[x][y-<span class="hljs-number">1</span>]==<span class="hljs-number">6</span>))<br>                dfs(grid,x,y-<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(isok(grid,x+<span class="hljs-number">1</span>,y) &amp;&amp; (grid[x+<span class="hljs-number">1</span>][y]==<span class="hljs-number">2</span> || grid[x+<span class="hljs-number">1</span>][y]==<span class="hljs-number">5</span> || grid[x+<span class="hljs-number">1</span>][y]==<span class="hljs-number">6</span>))<br>                dfs(grid,x+<span class="hljs-number">1</span>,y);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(grid[x][y]==<span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">if</span>(isok(grid,x,y+<span class="hljs-number">1</span>) &amp;&amp; (grid[x][y+<span class="hljs-number">1</span>]==<span class="hljs-number">1</span> || grid[x][y+<span class="hljs-number">1</span>]==<span class="hljs-number">3</span> || grid[x][y+<span class="hljs-number">1</span>]==<span class="hljs-number">5</span>))<br>                dfs(grid,x,y+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(isok(grid,x+<span class="hljs-number">1</span>,y) &amp;&amp; (grid[x+<span class="hljs-number">1</span>][y]==<span class="hljs-number">2</span> || grid[x+<span class="hljs-number">1</span>][y]==<span class="hljs-number">5</span> || grid[x+<span class="hljs-number">1</span>][y]==<span class="hljs-number">6</span>))<br>                dfs(grid,x+<span class="hljs-number">1</span>,y);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(grid[x][y]==<span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-keyword">if</span>(isok(grid,x,y-<span class="hljs-number">1</span>) &amp;&amp; (grid[x][y-<span class="hljs-number">1</span>]==<span class="hljs-number">1</span> || grid[x][y-<span class="hljs-number">1</span>]==<span class="hljs-number">4</span> || grid[x][y-<span class="hljs-number">1</span>]==<span class="hljs-number">6</span>))<br>                dfs(grid,x,y-<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(isok(grid,x-<span class="hljs-number">1</span>,y) &amp;&amp; (grid[x-<span class="hljs-number">1</span>][y]==<span class="hljs-number">2</span> || grid[x-<span class="hljs-number">1</span>][y]==<span class="hljs-number">3</span> || grid[x-<span class="hljs-number">1</span>][y]==<span class="hljs-number">4</span>))<br>                dfs(grid,x-<span class="hljs-number">1</span>,y);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(grid[x][y]==<span class="hljs-number">6</span>)&#123;<br>            <span class="hljs-keyword">if</span>(isok(grid,x,y+<span class="hljs-number">1</span>) &amp;&amp; (grid[x][y+<span class="hljs-number">1</span>]==<span class="hljs-number">1</span> || grid[x][y+<span class="hljs-number">1</span>]==<span class="hljs-number">3</span> || grid[x][y+<span class="hljs-number">1</span>]==<span class="hljs-number">5</span>))<br>                dfs(grid,x,y+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(isok(grid,x-<span class="hljs-number">1</span>,y) &amp;&amp; (grid[x-<span class="hljs-number">1</span>][y]==<span class="hljs-number">2</span> || grid[x-<span class="hljs-number">1</span>][y]==<span class="hljs-number">3</span> || grid[x-<span class="hljs-number">1</span>][y]==<span class="hljs-number">4</span>))<br>                dfs(grid,x-<span class="hljs-number">1</span>,y);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isok</span><span class="hljs-params">(<span class="hljs-type">int</span> [][]grid , <span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span>&#123;<br>        <span class="hljs-keyword">return</span>  !(x&lt;<span class="hljs-number">0</span> || x&gt;grid.length-<span class="hljs-number">1</span> || y&lt;<span class="hljs-number">0</span> || y&gt;grid[<span class="hljs-number">0</span>].length-<span class="hljs-number">1</span> || vis[x][y]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="题目十三：猜数字游戏"><a href="#题目十三：猜数字游戏" class="headerlink" title="题目十三：猜数字游戏"></a>题目十三：猜数字游戏</h2><h3 id="题目描述：-12"><a href="#题目描述：-12" class="headerlink" title="题目描述："></a>题目描述：</h3><p>你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：</p><p>写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：</p><p>猜测数字中有多少位属于数字和确切位置都猜对了（称为 <code>&quot;Bulls&quot;</code>, 公牛），<br>有多少位属于数字猜对了但是位置不对（称为 <code>&quot;Cows&quot;</code>, 奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。<br>给你一个秘密数字 <code>secret</code> 和朋友猜测的数字 <code>guess</code> ，请你返回对朋友这次猜测的提示。</p><p>提示的格式为 <code>&quot;xAyB&quot;</code> ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。</p><p>请注意秘密数字和朋友猜测的数字都可能含有重复数字。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">输入: secret = <span class="hljs-string">&quot;1807&quot;</span>, guess = <span class="hljs-string">&quot;7810&quot;</span><br>输出: <span class="hljs-string">&quot;1A3B&quot;</span><br>解释: 数字和位置都对（公牛）用 <span class="hljs-string">&#x27;|&#x27;</span> 连接，数字猜对位置不对（奶牛）的采用斜体加粗标识。<br><span class="hljs-string">&quot;1807&quot;</span><br>  |<br><span class="hljs-string">&quot;7810&quot;</span><br><br>输入: secret = <span class="hljs-string">&quot;1123&quot;</span>, guess = <span class="hljs-string">&quot;0111&quot;</span><br>输出: <span class="hljs-string">&quot;1A1B&quot;</span><br>解释: 数字和位置都对（公牛）用 <span class="hljs-string">&#x27;|&#x27;</span> 连接，数字猜对位置不对（奶牛）的采用斜体加粗标识。<br><span class="hljs-string">&quot;1123&quot;</span>        <span class="hljs-string">&quot;1123&quot;</span><br>  |      or     |<br><span class="hljs-string">&quot;0111&quot;</span>        <span class="hljs-string">&quot;0111&quot;</span><br>注意，两个不匹配的 <span class="hljs-number">1</span> 中，只有一个会算作奶牛（数字猜对位置不对）。通过重新排列非公牛数字，其中仅有一个 <span class="hljs-number">1</span> 可以成为公牛数字。<br></code></pre></td></tr></table></figure><h3 id="解题思路：-12"><a href="#解题思路：-12" class="headerlink" title="解题思路："></a>解题思路：</h3><blockquote><p>根据题意，对于公牛，需要满足数字和确切位置都猜对。我们可以遍历 secret 和 guess，统计满足 secret[i]&#x3D;guess[i] 的下标个数，即为公牛的个数。</p><p>对于奶牛，需要满足数字猜对但是位置不对。我们可以在 <code>secret[i]=guess[i]</code> 时，分别统计 secret 和 guess 的各个字符的出现次数，记在两个长度为 1010 的数组中。根据题目所述的「这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字」，由于多余的数字无法匹配，对于 0 到 9 的每位数字，应取其在 secret 和 guess 中的出现次数的最小值。将每位数字出现次数的最小值累加，即为奶牛的个数。</p></blockquote><h5 id="。复杂度分析：-2"><a href="#。复杂度分析：-2" class="headerlink" title="。复杂度分析："></a>。复杂度分析：</h5><p>时间复杂度：*<code>O(N)</code>*，其中 N 是字符串 secret 的长度。</p><p>空间复杂度：*<code>O(C)</code>*。需要常数个空间统计字符出现次数，由于我们统计的是数字字符，因此 C&#x3D;10。</p><h5 id="Java代码：-15"><a href="#Java代码：-15" class="headerlink" title="Java代码："></a>Java代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getHint</span><span class="hljs-params">(String secret, String guess)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bulls</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span>[] cntS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-type">int</span>[] cntG = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; secret.length(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (secret.charAt(i) == guess.charAt(i)) &#123;<br>                ++bulls;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ++cntS[secret.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>];<br>                ++cntG[guess.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cows</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>            cows += Math.min(cntS[i], cntG[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Integer.toString(bulls) + <span class="hljs-string">&quot;A&quot;</span> + Integer.toString(cows) + <span class="hljs-string">&quot;B&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>科软课程资料</category>
      
    </categories>
    
    
    <tags>
      
      <tag>科软课程资料</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
